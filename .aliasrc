# -*- coding:utf-8 mode:shell-script -*-
alias ls='ls -x -v --color=auto'
alias ll='ls -la'
alias la='ls -a'
alias starte='emacs --daemon'

export emacsc="emacsclient"
export EDITOR="$emacsc"

alias e="$emacsc -c -n"
alias et="$emacsc -t -n"
alias enox="$emacsc -nw"
alias en="$emacsc"
alias E='SUDO_EDITOR="emacsclient -c" sudo -e '
alias Enox='SUDO_EDITOR="emacsclient -nw " sudo -e '
alias En='SUDO_EDITOR="emacsclient  " sudo -e '
alias mv=' timeout 8 mv -iv'
alias cp="cp -i"
alias rm=' timeout 3 rm -Iv --one-file-system'
alias du="du -h -c"
alias df="df -h -T --total"
alias xselex='xsel -p | xsel -is && xsel -b | xsel -ip && xsel -s | xsel -ib'
alias open="mimeopen"
alias feh="feh -."
alias sudo='sudo '

# alias akamai='docker run -it -v $HOME/.edgerc:/root/.edgerc:ro akamai/shell akamai'

# if [[ -x "$(which bundle 2>/dev/null)" ]] ; then
#     function rails (){
#         bundle exec rails $@
#     }
#     function rake (){
#         bundle exec rails $@
#     }
# fi

function  alert {
    # local dir="$( find . -maxdepth 1 -type d | sed -e 's;\./;;' | peco )"
    local ar=$?
    local dirPath="/usr/share/icons/HighContrast/scalable/status/"
    local okFile="weather-clear.svg"
    local noFile="weather-showers.svg"
    if [ $ar -eq 0 ] ; then
        notify-send -i ${dirPath}${okFile} "OK"
    else
        notify-send -i ${dirPath}${noFile} "NO"
    fi
}

function  beee {
    local ar=$?
    if [ $ar -eq 0 ] ; then
        beep -f 1800 -l 70 -D 50 -n -f 2350 -l 70
    else
        beep -f 200 -l 70 -D 100 -n -f 200 -l 70 -D 100 -n -f 200 -l 70 -D 100 -n -f 200 -l 70
    fi
}
function git-root() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    cd "$PWD"/"$(git rev-parse --show-cdup)"
  fi
}

function el {
    local path="$(echo $1 | perl -pe 's/([^:]+):([\d:]+)\s.*$/+$2 $1/g')"
    eval "e $path"
}

function srch {
    local tmp=/tmp/srch
    csearch $@ | fzf | perl -pe 's/([^:]+):([\d:]+)\s.*$/+$2 $1/g' > $tmp
    if [[ $(head -1 $tmp | wc -l ) -eq 0 ]] ; then
        return
    fi
    cat /tmp/srch | xargs -L1 emacsclient -t -n
}

function ediff() {
	if [ "X${2}" = "X" ]; then
		echo "USAGE: ediff <FILE 1> <FILE 2>"
	else
		# The --eval flag takes lisp code and evaluates it with EMACS
		emacsclient --eval "(ediff-files \"$1\" \"$2\")"
	fi
}


############################################
function net_tools_deprecated_message () {
  echo -n 'net-tools コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
}

function arp () {
  net_tools_deprecated_message
  echo 'Use `ip n`'
}
function ifconfig () {
  net_tools_deprecated_message
  echo 'Use `ip a`, `ip link`, `ip -s link`'
}
function iptunnel () {
  net_tools_deprecated_message
  echo 'Use `ip tunnel`'
}
function iwconfig () {
  echo -n 'iwconfig コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
  echo 'Use `iw`'
}
function nameif () {
  net_tools_deprecated_message
  echo 'Use `ip link`, `ifrename`'
}
function netstat () {
  net_tools_deprecated_message
  echo 'Use `ss`, `ip route` (for netstat -r), `ip -s link` (for netstat -i), `ip maddr` (for netstat -g)'
}
function route () {
  net_tools_deprecated_message
  echo 'Use `ip r`'
}

function ghq_cd() {
    local ghq_root="$(ghq root)"
    local selected_dir="$(ghq list | fzf --no-multi --exit-0 --preview='ls -FA1 '${ghq_root}/'{}')"
    local res="${ghq_root}/$selected_dir"
    if [ -d "$res" ]; then
         cd "$res"
    fi
}


function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
function colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}






function j() {
    [ $# -gt 0 ] && fasd_cd -d "$*" && return
    local dir
    dir="$(fasd -Rdl "$1" | fzf -1 -0 --no-sort +m)" && cd "${dir}" || return 1
}

# fh - repeat history
runcmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, <>' ; }

fh() {
  HISTTIMEFORMAT=""
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | runcmd
}

# fhe - repeat history edit
writecmd (){ perl -e 'ioctl STDOUT, 0x5412, $_ for split //, do{ chomp($_ = <>); $_ }' ; }

fhe() {
  HISTTIMEFORMAT=""
  ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -re 's/^\s*[0-9]+\s*//' | writecmd
}


function man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[01;33;03;40m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}


function alias_completion {
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

    local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words <<< "$alias_args"

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
            if [[ -n "$completion_loader" ]]; then
                # force loading of completions for the aliased command
                eval "$completion_loader $alias_cmd"
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})


						                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}; alias_completion


complete -F _filedir_xspec e
complete -F _filedir_xspec et
complete -F _filedir_xspec enox
complete -F _filedir_xspec en

function ips ()
{
    if command -v ip &>/dev/null
    then
        ip addr | \grep -oP 'inet \K[\d.]+'
    else
        echo "You don't have ifconfig or ip command installed!"
    fi
}

function down4me ()
{
    # example '$ down4me http://www.google.com'
    curl -s "https://downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

function myip ()
{
    res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
    echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}

function mkcd ()
{
    mkdir -p -- "$*"
    cd -- "$*"
}


# 最強man
function explain () {
  # about 'explain any bash command via mankier.com manpage API'
  # param '1: Name of the command to explain'
  # example '$ explain                # interactive mode. Type commands to explain in REPL'
  # example '$ explain 'cmd -o | ...' # one quoted command to explain it.'
  # group 'explain'

  if [ "$#" -eq 0 ]; then
    while read  -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                  interactive mode."
    echo "explain 'cmd -o | ...'   one quoted command to explain it."
  fi
}


function extract() {
    local opt
    local OPTIND=1
    while getopts "hv" opt; do
        case "$opt" in
            h)
                cat <<End-Of-Usage
Usage: ${FUNCNAME[0]} [option] <archives>
    options:
        -h  show this message and exit
        -v  verbosely list files processed
End-Of-Usage
                return
                ;;
            v)
                local -r verbose='v'
                ;;
            ?)
                extract -h >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    [ $# -eq 0 ] && extract -h && return 1
    while [ $# -gt 0 ]; do
	    if [ -f "$1" ]; then
		    case "$1" in
                *.tar.bz2|*.tbz|*.tbz2) tar "x${verbose}jf" "$1" ;;
                *.tar.gz|*.tgz) tar "x${verbose}zf" "$1" ;;
                *.tar.xz) xz --decompress "$1"; set -- "$@" "${1:0:-3}" ;;
                *.tar.Z) uncompress "$1"; set -- "$@" "${1:0:-2}" ;;
                *.bz2) bunzip2 "$1" ;;
                *.deb) dpkg-deb -x${verbose} "$1" "${1:0:-4}" ;;
                *.pax.gz) gunzip "$1"; set -- "$@" "${1:0:-3}" ;;
                *.gz) gunzip "$1" ;;
                *.pax) pax -r -f "$1" ;;
                *.pkg) pkgutil --expand "$1" "${1:0:-4}" ;;
                *.rar) unrar x "$1" ;;
                *.rpm) rpm2cpio "$1" | cpio -idm${verbose} ;;
                *.tar) tar "x${verbose}f" "$1" ;;
                *.txz) mv "$1" "${1:0:-4}.tar.xz"; set -- "$@" "${1:0:-4}.tar.xz" ;;
                *.xz) xz --decompress "$1" ;;
                *.zip|*.war|*.jar) unzip "$1" ;;
                *.Z) uncompress "$1" ;;
                *.7z) 7za x "$1" ;;
                *) echo "'$1' cannot be extracted via extract" >&2;;
		    esac
        else
		    echo "extract: '$1' is not a valid file" >&2
	    fi
        shift
    done
}
### ----------------------------
### git

function git_remote {
  echo "Running: git remote add origin ${GIT_HOSTING}:$1.git"
  git remote add origin $GIT_HOSTING:$1.git
}

function git_first_push {
  echo "Running: git push origin master:refs/heads/master"
  git push origin master:refs/heads/master
}

function git_pub() {
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  echo "Publishing ${BRANCH} to remote origin"
  git push -u origin $BRANCH
}

function git_revert() {
  git reset $1
  git reset --soft HEAD@{1}
  git commit -m "Revert to ${1}"
  git reset --hard
}

function git_rollback() {
  function is_clean() {
    if [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]]; then
      echo "Your branch is dirty, please commit your changes"
      kill -INT $$
    fi
  }

  function commit_exists() {
    git rev-list --quiet $1
    status=$?
    if [ $status -ne 0 ]; then
      echo "Commit ${1} does not exist"
      kill -INT $$
    fi
  }

  function keep_changes() {
    while true
    do
      read -p "Do you want to keep all changes from rolled back revisions in your working tree? [Y/N]" RESP
      case $RESP
      in
      [yY])
        echo "Rolling back to commit ${1} with unstaged changes"
        git reset $1
        break
        ;;
      [nN])
        echo "Rolling back to commit ${1} with a clean working tree"
        git reset --hard $1
        break
        ;;
      *)
        echo "Please enter Y or N"
      esac
    done
  }

  if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
    is_clean
    commit_exists $1

    while true
    do
      read -p "WARNING: This will change your history and move the current HEAD back to commit ${1}, continue? [Y/N]" RESP
      case $RESP
        in
        [yY])
          keep_changes $1
          break
          ;;
        [nN])
          break
          ;;
        *)
          echo "Please enter Y or N"
      esac
    done
  else
    echo "you're currently not in a git repository"
  fi
}

function git_remove_missing_files() {
  git ls-files -d -z | xargs -0 git update-index --remove
}

# Adds files to git's exclude file (same as .gitignore)
function local-ignore() {
  echo "$1" >> .git/info/exclude
}

# get a quick overview for your git repo
function git_info() {
    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        # print informations
        echo "git repo overview"
        echo "-----------------"
        echo

        # print all remotes and thier details
        for remote in $(git remote show); do
            echo $remote:
            git remote show $remote
            echo
        done

        # print status of working repo
        echo "status:"
        if [ -n "$(git status -s 2> /dev/null)" ]; then
            git status -s
        else
            echo "working directory is clean"
        fi

        # print at least 5 last log entries
        echo
        echo "log:"
        git log -5 --oneline
        echo

    else
        echo "you're currently not in a git repository"

    fi
}

function git_stats {
# awesome work from https://github.com/esc/git-stats
# including some modifications

if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
    echo "Number of commits per author:"
    git --no-pager shortlog -sn --all
    AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ')
    LOGOPTS=""
    if [ "$1" == '-w' ]; then
        LOGOPTS="$LOGOPTS -w"
        shift
    fi
    if [ "$1" == '-M' ]; then
        LOGOPTS="$LOGOPTS -M"
        shift
    fi
    if [ "$1" == '-C' ]; then
        LOGOPTS="$LOGOPTS -C --find-copies-harder"
        shift
    fi
    for a in $AUTHORS
    do
        echo '-------------------'
        echo "Statistics for: $a"
        echo -n "Number of files changed: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f3 | sort -iu | wc -l
        echo -n "Number of lines added: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f1 | awk '{s+=$1} END {print s}'
        echo -n "Number of lines deleted: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f2 | awk '{s+=$1} END {print s}'
        echo -n "Number of merges: "
        git log $LOGOPTS --all --merges --author=$a | grep -c '^commit'
    done
else
    echo "you're currently not in a git repository"
fi
}



function jsay() {
    # open_jtalk でしゃべらす
    local outfile=$(mktemp 2>/dev/null||mktemp -t tmp)
    local talk="open_jtalk -m /usr/share/voice/mei_normal.htsvoice -x /usr/local/dic/ -ow ${outfile}"
    trap  '[[ "${outfile}" ]] && rm ${outfile}' 0 1 2 3 15

    if [[ $# -gt 0 ]]; then
        if [[ -f $1 ]]; then
            $talk $1 && aplay ${outfile}
        else
            echo $* | $talk && aplay ${outfile}
        fi
    elif [ -p /dev/stdin ]; then
        $talk && aplay ${outfile}
    fi

    rm ${outfile}
}

noti(){
    local start=$(date +%s)
    "$@"
    local succ=$?
    local elapsedtime=$(($(date +%s) - start))
    local commandTimeout=1
    if [[ $elapsedtime -gt $commandTimeout ]] ; then
        local msg="$([ $succ -eq 0 ] && echo done || echo fail)($succ)::$(echo $@)::$elapsedtime[sec]"
        echo $msg
        if type arcus >/dev/null; then
            arcus send -t "finish!" -m "$msg"
        fi
        if type notify-send >/dev/null; then
            notify-send Notification "$msg"
        fi
    fi
}


no_modules() {
  local project_root=$1

  [ ! -r "$project_root/node_modules" ]
}

complete_npx() {
  local project_root="$(pwd -P)"

  while no_modules "$project_root"; do
    if [ "$project_root" = '/' ]; then
      return 1
    fi

    project_root=$(dirname "$project_root")
  done

  local CURR_ARG
  local FILES=$(find ./node_modules/.bin -print0 -type f -or -type l | xargs  -0 -n1 basename)

  CURR_ARG=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "${FILES[@]}" -- $CURR_ARG ) );
}

complete -F complete_npx npx


if [[ "$(basename $SHELL)" == "bash" ]]; then
    
    function __fzf_history ()
    {
        builtin history -a;
        builtin history -c;
        builtin history -r;
        builtin typeset \
                READLINE_LINE_NEW="$(
            HISTTIMEFORMAT= builtin history |
            command fzf +s -e --tac +m -n2..,.. --tiebreak=index --toggle-sort=ctrl-r |
            command sed '
                /^ *[0-9]/ {
                    s/ *\([0-9]*\) .*/!\1/;
                    b end;
                };
                d;
                : end
            '
        )";

        if [[ -n $READLINE_LINE_NEW ]] ; then
            builtin bind '"\er": redraw-current-line'
            builtin bind '"\e^": magic-space'
            READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${READLINE_LINE_NEW}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
            READLINE_POINT=$(( READLINE_POINT + ${#READLINE_LINE_NEW} ))
        else
            builtin bind '"\er":'
            builtin bind '"\e^":'
        fi
    }


    builtin set -o histexpand;
    builtin bind -x '"\C-x1": __fzf_history';
    builtin bind '"\C-r": "\C-x1\e^\er"'
fi

# -*- coding:utf-8 mode:shell-script -*-
alias ls='ls -x -v --color=auto'
alias ll='ls -la'
alias la='ls -a'
alias df='df -h'
alias starte='emacs --daemon'
alias e="emacsclient -c"
alias enox="emacsclient"
alias E='SUDO_EDITOR="emacsclient -c" sudo -e '
alias Enox='SUDO_EDITOR="emacsclient " sudo -e '
alias mv="mv -i"
alias cp="cp -i"
alias rm="rm -i"
alias server_name='ssh -v -l USERNAME IP ADDRESS'
alias du="du -h -c"
alias df="df -h -T --total"
alias grep="grep -i -n --color"
alias bee='for i in {1..5}; do aplay -D plughw:1,7 ~/beep.wav; done' 
alias pgg='ps -Af | grep'
alias xsels='xsel -ib < /tmp/screen-exchange'
alias xselex='xsel -p | xsel -is && xsel -b | xsel -ip && xsel -s | xsel -ib'
alias kpclimy='kpcli --kdb="$HOME/Dropbox/database/NewDatabase.kdbx"'
alias open="xdg-open"
# coredump した場所
alias core="sudo systemd-coredumpctl list | tail"
alias coreout='sudo systemd-coredumpctl dump -o core'
alias beeps="for i in {1..5}; do aplay ~/beep.wav; done"

############################################
# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Stop all containers
dstop() { docker stop $(docker ps -a -q);}

# Remove all containers
drm() { docker rm $(docker ps -a -q); }


# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test 
dbu() { docker build -t=$1 .; }

# Show all alias related docker
# dalias(){ alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort;}
alias dalias='\grep -E -e "^alias.*docker" -e '\''\(\)\s+{.*docker'\'' $HOME/.aliasrc'
#

docker-nsenter() {              #docker
    declare container_id=$1
    if [ -z "$container_id" ]; then
        echo "Usage: docker_container <container_id>" >&2
        return 1
    fi
    nsenter --mount --uts --ipc --net --pid --target $(docker inspect --format '{{.State.Pid}}' $container_id)
}







############################################
net_tools_deprecated_message () {
  echo -n 'net-tools コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
}

arp () {
  net_tools_deprecated_message
  echo 'Use `ip n`'
}
ifconfig () {
  net_tools_deprecated_message
  echo 'Use `ip a`, `ip link`, `ip -s link`'
}
iptunnel () {
  net_tools_deprecated_message
  echo 'Use `ip tunnel`'
}
iwconfig () {
  echo -n 'iwconfig コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
  echo 'Use `iw`'
}
nameif () {
  net_tools_deprecated_message
  echo 'Use `ip link`, `ifrename`'
}
netstat () {
  net_tools_deprecated_message
  echo 'Use `ss`, `ip route` (for netstat -r), `ip -s link` (for netstat -i), `ip maddr` (for netstat -g)'
}
route () {
  net_tools_deprecated_message
  echo 'Use `ip r`'
}

# 
function cdd {
    local dir="$( find . -maxdepth 1 -type d | sed -e 's;\./;;' | peco )"
    if [ ! -z "$dir" ] ; then
        cd "$dir"
    fi
}

# -*- coding:utf-8 mode:shell-script -*-
alias ls='ls -x -v --color=auto'
alias ll='ls -la'
alias la='ls -a'
alias l1='ls -1'
alias starte='emacs --daemon'
alias e="emacsclient -c -n"
alias et="emacsclient -t -n"
alias enox="emacsclient"
alias en="emacsclient"
alias E='SUDO_EDITOR="emacsclient -c" sudo -e '
alias Enox='SUDO_EDITOR="emacsclient " sudo -e '
alias mv=' timeout 8 mv -iv'
alias cp="cp -i"
alias rm=' timeout 3 rm -Iv --one-file-system'
alias server_name='ssh -v -l USERNAME IP ADDRESS'
alias du="du -h -c"
alias df="df -h -T --total"
alias grep="grep -i -n --color"
# sudo alias get
alias sudo="sudo "

# alias bee='for i in {1..5}; do aplay -D plughw:1,7 ~/beep.wav; done'
alias pgg='ps -Af | grep'
alias xsels='xsel -ib < /tmp/screen-exchange'
alias xselex='xsel -p | xsel -is && xsel -b | xsel -ip && xsel -s | xsel -ib'
alias open="mimeopen"

# coredump した場所

alias core="sudo systemd-coredumpctl list | tail"
alias coreout='sudo systemd-coredumpctl dump -o core'
alias beeps="for i in {1..5}; do aplay ~/beep.wav; done"

# alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
# alias alert='if [ "$?" -eq 0 ] ;
# then  notify-send  "OKKKKKK" ;
#  else notify-send  "NGGGGGGGGGGGG"  ; fi'

function  alert {
    # local dir="$( find . -maxdepth 1 -type d | sed -e 's;\./;;' | peco )"
    local ar=$?
    local dirPath="/usr/share/icons/HighContrast/scalable/status/"
    local okFile="weather-clear.svg"
    local noFile="weather-showers.svg"
    if [ $ar -eq 0 ] ; then
        notify-send -i ${dirPath}${okFile} "OK"
    else
        notify-send -i ${dirPath}${noFile} "NO"
    fi
}

function  beee {
    local ar=$?
    if [ $ar -eq 0 ] ; then
        beep -f 1800 -l 70 -D 50 -n -f 2350 -l 70
    else
        beep -f 200 -l 70 -D 100 -n -f 200 -l 70 -D 100 -n -f 200 -l 70 -D 100 -n -f 200 -l 70
    fi
}



############################################
# Get latest container ID
alias dl="docker ps -l -q"

# Get container process
alias dps="docker ps"

# Get process included stop container
alias dpa="docker ps -a"

# Get images
alias di="docker images"

# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"

# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"

# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

# Stop all containers
dstop() { docker stop $(docker ps -a -q);}

# Remove all containers
drm() { docker rm $(docker ps -aq --filter='status=exited'); }


# Remove all images
dri() { docker rmi $(docker images -q); }

# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }

# Show all alias related docker
# dalias(){ alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort;}
alias dalias='\grep -E -e "^alias.*docker" -e '\''\(\)\s+{.*docker'\'' -e '\''function docker'\'' $HOME/.aliasrc'
#

function docker-remove-most-recent-container() {
  docker ps -a | head -2 | tail -1 | awk '{print $NF}' | xargs docker rm
}

function docker-remove-most-recent-image() {
  docker images | head -2 | tail -1 | awk '{print $3}' | xargs docker rmi
}

function docker-enter() {
  # about 'enter the specified docker container using bash'
  # group 'docker'
  # param '1: Name of the container to enter'
  # example 'docker-enter oracle-xe'
  docker exec -it "$@" /bin/bash;
}

function docker-remove-images() {
  # about 'attempt to remove images with supplied tags or all if no tags are supplied'
  # group 'docker'
  if [ -z "$1" ]; then
    docker rmi $(docker images -q)
  else
    DOCKER_IMAGES=""
    for IMAGE_ID in $@; do DOCKER_IMAGES="$DOCKER_IMAGES\|$IMAGE_ID"; done
    # Find the image IDs for the supplied tags
    ID_ARRAY=($(docker images | grep "${DOCKER_IMAGES:2}" | awk {'print $3'}))
    # Strip out duplicate IDs before attempting to remove the image(s)
    docker rmi $(echo ${ID_ARRAY[@]} | tr ' ' '\n' | sort -u | tr '\n' ' ')
 fi
}

function docker-image-dependencies() {
  # about 'attempt to create a Graphiz image of the supplied image ID dependencies'
  # group 'docker'
  if hash dot 2>/dev/null; then
    OUT=$(mktemp -t docker-viz-XXXX.png)
    docker images -viz | dot -Tpng > $OUT
    case $OSTYPE in
      linux*)
        xdg-open $OUT
        ;;
      darwin*)
        open $OUT
        ;;
    esac
  else
    >&2 echo "Can't show dependencies; Graphiz is not installed"
  fi
}

function docker-runtime-environment() {
  # about 'attempt to list the environmental variables of the supplied image ID'
  # group 'docker'
  docker run "$@" env
}







############################################
net_tools_deprecated_message () {
  echo -n 'net-tools コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
}

arp () {
  net_tools_deprecated_message
  echo 'Use `ip n`'
}
ifconfig () {
  net_tools_deprecated_message
  echo 'Use `ip a`, `ip link`, `ip -s link`'
}
iptunnel () {
  net_tools_deprecated_message
  echo 'Use `ip tunnel`'
}
iwconfig () {
  echo -n 'iwconfig コマンドはもう非推奨ですよ？おじさんなんじゃないですか？ '
  echo 'Use `iw`'
}
nameif () {
  net_tools_deprecated_message
  echo 'Use `ip link`, `ifrename`'
}
netstat () {
  net_tools_deprecated_message
  echo 'Use `ss`, `ip route` (for netstat -r), `ip -s link` (for netstat -i), `ip maddr` (for netstat -g)'
}
route () {
  net_tools_deprecated_message
  echo 'Use `ip r`'
}

#
function cdd {
    local dir=$( find . -maxdepth 1 -type d | sed  -e '1d' -e 's;\./;;' | sort | sed -e '$a..\n.' | peco --query "$READLINE_LINE" )
    if [ ! -z "$dir" ] ; then
        cd "$dir"
    fi
}

function peco-ssh() {
  local SSH=$(\grep "^\s*Host " ~/.ssh/config | sed s/"[\s ]*Host "// | \grep -v "^\*$" | sort | peco)
  ssh $SSH
}

function google() {
    local str opt
    if [ $# != 0 ]; then
        for i in $*; do
            # $strが空じゃない場合、検索ワードを+記号でつなぐ(and検索)
            str="$str${str:++}$i"
        done
        opt='search?num=100'
        opt="${opt}&q=${str}"
    fi
    xdg-open http://www.google.co.jp/$opt
}

function ghq-peco() {
    local selected_dir=$(ghq list -p | peco --query "$READLINE_LINE")
    if [ -n "$selected_dir" ]; then
        # BUFFER=
        cd $selected_dir
    fi
}
function hg-peco() {
    local selected_dir=$(hg locate | peco --query "$READLINE_LINE")
    if [ -n "$selected_dir" ]; then
        cd $(dirname $selected_dir)
    fi
}





function parse_git_branch() {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
function colors() {
    local fgc bgc vals seq0

    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black

            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}

            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
        echo; echo
    done
}


function peco-select-history () {
    declare l=$(HISTTIMEFORMAT= history | sort -k1,1nr | perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' | peco --query "$READLINE_LINE")
    READLINE_LINE="$l"
    READLINE_POINT=${#l}
}
if [ -x "`which peco`" ]; then

	function peco-ag () {
		ag $@ | peco --query "$READLINE_LINE" | awk -F : '{print "+" $2 " " $1}' | xargs emacsclient -c
	}

	bind -x '"\C-r": peco-select-history'
	bind    '"\C-xr": reverse-search-history'
fi


function j() {
    if [ $# -eq 0 ] ; then
        local cddd="$(z  | tac | awk '{for(i=2;i<NF;i++){printf("%s ",$i)}print $NF}'  | peco)"
        echo cd "$cddd"
        cd -- "$cddd"
    else
        z $*
    fi
}
function lll() {
    ls -a1 $* |  peco
}
function man() {
    env LESS_TERMCAP_mb=$'\E[01;31m' \
    LESS_TERMCAP_md=$'\E[01;38;5;74m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[01;33;03;40m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[04;38;5;146m' \
    man "$@"
}


function alias_completion {
    local namespace="alias_completion"

    # parse function based completion definitions, where capture group 2 => function and 3 => trigger
    local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
    # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
    local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

    # create array of function completion triggers, keeping multi-word triggers together
    eval "local completions=($(complete -p | sed -Ene "/$compl_regex/s//'\3'/p"))"
    (( ${#completions[@]} == 0 )) && return 0

    # create temporary file for wrapper functions and completions
    rm -f "/tmp/${namespace}-*.tmp" # preliminary cleanup
    local tmp_file; tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}XXX.tmp")" || return 1

    local completion_loader; completion_loader="$(complete -p -D 2>/dev/null | sed -Ene 's/.* -F ([^ ]*).*/\1/p')"

    # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
    local line; while read line; do
        eval "local alias_tokens; alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
        local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

        # skip aliases to pipes, boolean control structures and other command lists
        # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
        eval "local alias_arg_words; alias_arg_words=($alias_args)" 2>/dev/null || continue
        # avoid expanding wildcards
        read -a alias_arg_words <<< "$alias_args"

        # skip alias if there is no completion function triggered by the aliased command
        if [[ ! " ${completions[*]} " =~ " $alias_cmd " ]]; then
            if [[ -n "$completion_loader" ]]; then
                # force loading of completions for the aliased command
                eval "$completion_loader $alias_cmd"
                # 124 means completion loader was successful
                [[ $? -eq 124 ]] || continue
                completions+=($alias_cmd)
            else
                continue
            fi
        fi
        local new_completion="$(complete -p "$alias_cmd")"

        # create a wrapper inserting the alias arguments if any
        if [[ -n $alias_args ]]; then
            local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
            # avoid recursive call loops by ignoring our own functions
            if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
                local compl_wrapper="_${namespace}::${alias_name}"
                    echo "function $compl_wrapper {
                        (( COMP_CWORD += ${#alias_arg_words[@]} ))
                        COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})


						                        (( COMP_POINT -= \${#COMP_LINE} ))
                        COMP_LINE=\${COMP_LINE/$alias_name/$alias_cmd $alias_args}
                        (( COMP_POINT += \${#COMP_LINE} ))
                        $compl_func
                    }" >> "$tmp_file"
                    new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
            fi
        fi

        # replace completion trigger by alias
        new_completion="${new_completion% *} $alias_name"
        echo "$new_completion" >> "$tmp_file"
    done < <(alias -p | sed -Ene "s/$alias_regex/\1 '\2' '\3'/p")
    source "$tmp_file" && rm -f "$tmp_file"
}; alias_completion


function ips ()
{
    if command -v ip &>/dev/null
    then
        ip addr | \grep -oP 'inet \K[\d.]+'
    else
        echo "You don't have ifconfig or ip command installed!"
    fi
}

function down4me ()
{
    # example '$ down4me http://www.google.com'
    curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g'
}

function myip ()
{
    res=$(curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+')
    echo -e "Your public IP is: ${echo_bold_green} $res ${echo_normal}"
}

function mkcd ()
{
    mkdir -p -- "$*"
    cd -- "$*"
}
